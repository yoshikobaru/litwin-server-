function applyTheme(theme) {
    document.documentElement.style.setProperty('--primary-color', theme.primary);
    document.documentElement.style.setProperty('--secondary-color', theme.secondary);
    document.documentElement.style.setProperty('--tertiary-color', theme.tertiary);
}

window.addEventListener('message', function(event) {
    if (event.data.type === 'updateTheme') {
        applyTheme(event.data.theme);
        updateUpgradeButtons();
    }
});

function updateUpgradeButtons() {
    const upgradeButtons = document.querySelectorAll('.market-item-buy');
    upgradeButtons.forEach(button => {
        button.style.backgroundColor = 'var(--secondary-color)';
    });
}
const defaultUpgrades = [
    { id: 'drinkLit', title: '–ë–∞—Ö–Ω—É—Ç—å LITWIN', emoji: 'üç∫' },
    { id: 'improveTap', title: '–í—ã–π—Ç–∏ –Ω–∞ –º–µ–∂–ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å', emoji: 'üåç' },
    { id: 'improveTap1', title: '–í–æ–π—Ç–∏ –≤ –∫–æ–Ω–¥–∏—Ü–∏–∏', emoji: 'üí™' },
    { id: 'improveTap2', title: '–ê–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Ç–∞–ø', emoji: 'üéØ' },
    { id: 'improveTap3', title: '–†–æ–¥–Ω—ã–π —Ç–∞–ø', emoji: 'üè†' },
    { id: 'farm', title: '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–≤–æ–¥ LITWIN', emoji: 'üè≠' },
    { id: 'hour1', title: '–ó–∞–µ—Ö–∞—Ç—å –≤ –∫–æ—Ñ–µ–º–∞–Ω–∏—é', emoji: '‚òï' },
    { id: 'hour2', title: '–ü–æ–¥–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ–π—Ü–∞', emoji: 'ü•ä' },
    { id: 'hour3', title: '–í—ã–∏–≥—Ä–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª –º–µ–¥–∏–∞–ª–∏–≥–µ', emoji: '‚öΩ' },
    { id: 'hour4', title: '–í—ã–∏–≥—Ä–∞—Ç—å –≥–æ–Ω–∫—É', emoji: 'üèéÔ∏è' },
    { id: 'energy', title: '–ó–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏', emoji: '‚ö°' },
    { id: 'starBoost1', title: '–ó–≤–µ–∑–¥–Ω—ã–π –±—É—Å—Ç x2', emoji: '‚≠ê', isPremium: true, stars: 100, multiplier: 2 },
    { id: 'starBoost2', title: '–ó–≤–µ–∑–¥–Ω—ã–π –±—É—Å—Ç x5', emoji: 'üåü', isPremium: true, stars: 250, multiplier: 5 },
    { id: 'starBoost3', title: '–ó–≤–µ–∑–¥–Ω—ã–π –±—É—Å—Ç x10', emoji: '‚ú®', isPremium: true, stars: 500, multiplier: 10 }
];
function updateUpgradeElements() {
    const marketItems = document.querySelectorAll('.market-item');
    marketItems.forEach(element => {
        const header = element.querySelector('.market-item-header');
        const button = element.querySelector('.market-item-buy');
        if (header && button) {
            let upgradeId = button.id.replace('Button', '');
            // –î–ª—è hourData1, hourData2 –∏ —Ç.–¥. –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ id
            if (upgradeId.startsWith('hourButton')) {
                upgradeId = 'hour' + upgradeId.replace('hourButton', '');
            }
            let upgrade = defaultUpgrades.find(u => u.id === upgradeId);
            
            if (!upgrade) {
                // –ï—Å–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ, —Å–æ–∑–¥–∞–µ–º –¥–ª—è –Ω–µ–≥–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —ç–º–æ–¥–∑–∏
                const title = header.querySelector('.market-item-title').textContent;
                upgrade = { id: upgradeId, title: title, emoji: 'üîß' }; // –ò—Å–ø–æ–ª—å–∑—É–µ–º üîß –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —ç–º–æ–¥–∑–∏
            }

            const level = header.querySelector('.market-item-level');
            const title = header.querySelector('.market-item-title');
            const profit = header.querySelector('.market-item-profit');
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            title.insertAdjacentHTML('beforebegin', `<span class="market-item-emoji">${upgrade.emoji}</span>`);
        }
    });
}

// –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–ª–∏ –¥–ª—è —ç–º–æ–¥–∑–∏ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã)
const style = document.createElement('style');
style.textContent = `
    .market-item-emoji {
        font-size: 1.2em;
        margin-right: 8px;
        vertical-align: middle;
    }
    .market-item-header {
        display: flex;
        align-items: center;
    }
    .market-item-title {
        flex-grow: 1;
    }
`;
document.head.appendChild(style);

// –í—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é updateUpgradeElements –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(function() {
        updateUpgradeElements();
        updateUpgradeButtons();
    }, 100); // –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
});

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
(function() {
    const collectionGrid = document.getElementById('collection-grid');
    const marketItems = document.getElementById('market-items');

    const canImages = [
        'assets/bankaClassic.png',
        'assets/bankamango.png',
        'assets/bankablueberry.png',
        'assets/lock.svg',
        'assets/lock.svg',
        'assets/lock.svg',
        'assets/lock.svg',
        'assets/lock.svg'
    ];
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    for (let i = 0; i < 8; i++) {
        const itemElement = document.createElement('div');
        itemElement.className = 'collection-item';
        itemElement.dataset.index = i;

        if (i >= 3) {
            itemElement.classList.add('inactive');
            itemElement.innerHTML = `<img src="${canImages[i]}" alt="–ë–∞–Ω–∫–∞ ${i + 1}" class="can-icon">`;
        } else {
            itemElement.innerHTML = `<img src="${canImages[i]}" alt="–ë–∞–Ω–∫–∞ ${i + 1}" class="can-icon">`;
            itemElement.addEventListener('click', function() {
                console.log(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–∞–Ω–∫—É ${i + 1}`);
                if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
                    window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
                }
            });
        }

        collectionGrid.appendChild(itemElement);
    }
    
    updateUnlockedCans();
    
    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è "–í—ã–ø–∏—Ç—å LIT"
    const drinkLitData = [
        { level: 1, profit: 1, price: 100 },
        { level: 2, profit: 2, price: 200 },
        { level: 3, profit: 3, price: 400 },
        { level: 4, profit: 4, price: 800 },
        { level: 5, profit: 5, price: 1600 },
        { level: 6, profit: 6, price: 3200 },
        { level: 7, profit: 7, price: 6400 },
        { level: 8, profit: 8, price: 12800 },
        { level: 9, profit: 9, price: 25600 },
        { level: 10, profit: 10, price: 51200 },
    ];
    
    // –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è "–£–ª—É—á—à–∏—Ç—å —Ç–∞–ø"
    const improveTapData = [
        { level: 1, profit: 1, price: 120 },
        { level: 2, profit: 2, price: 250 },
        { level: 3, profit: 3, price: 470 },
        { level: 4, profit: 4, price: 899 },
        { level: 5, profit: 5, price: 1750 },
        { level: 6, profit: 6, price: 4200 },
        { level: 7, profit: 7, price: 7800 },
        { level: 8, profit: 8, price: 14500 },
        { level: 9, profit: 9, price: 27900 },
        { level: 10, profit: 10, price: 55600 },
    ];
    const improveTapData1 = [
        { level: 1, profit: 1, price: 200 },
        { level: 2, profit: 2, price: 340 },
        { level: 3, profit: 3, price: 620 },
        { level: 4, profit: 4, price: 999 },
        { level: 5, profit: 5, price: 1890 },
        { level: 6, profit: 6, price: 5100 },
        { level: 7, profit: 7, price: 8100 },
        { level: 8, profit: 8, price: 16500 },
        { level: 9, profit: 9, price: 28700 },
        { level: 10, profit: 10, price: 55900 },
    ];
    const improveTapData2 = [
        { level: 1, profit: 7, price: 9000 },
        { level: 2, profit: 8, price: 17000 },
        { level: 3, profit: 9, price: 17000 },
        { level: 4, profit: 10, price: 60000 },
        { level: 5, profit: 11, price: 126000 },
        { level: 6, profit: 12, price: 224000 },
        { level: 7, profit: 13, price: 443000 },
        { level: 8, profit: 14, price: 822000 },
        { level: 9, profit: 15, price: 1225000 },
        { level: 10, profit: 16, price: 2342000 },
    ];
    const improveTapData3 = [
        { level: 1, profit: 1, price: 120 },
        { level: 2, profit: 1, price: 250 },
        { level: 3, profit: 2, price: 300 },
        { level: 4, profit: 2, price: 400 },
        { level: 5, profit: 3, price: 500 },
        { level: 6, profit: 3, price: 900 },
        { level: 7, profit: 4, price: 1100 },
        { level: 8, profit: 4, price: 2900 },
        { level: 9, profit: 5, price: 4500 },
        { level: 10, profit: 5, price: 5600 },
    ];
    const improveTapElement = document.createElement('div');
improveTapElement.className = 'market-item';
improveTapElement.innerHTML = `
    <div class="market-item-header">
        <span class="market-item-level">–£—Ä. <span id="improveTapLevel">1</span></span>
        <span class="market-item-title">–í—ã–π—Ç–∏ –Ω–∞ –º–µ–∂–ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å</span>
        <span class="market-item-profit">
            –ü—Ä–∏–±—ã–ª—å –∑–∞ —Ç–∞–ø <img src="assets/litcoin.png" alt="LIT" class="lit-coin-small">+<span id="improveTapProfit">1</span>
        </span>
    </div>
    <hr class="item-divider">
    <div class="market-item-buy" id="improveTapButton">
        <img src="assets/litcoin.png" alt="LIT" class="lit-coin">
        <span class="price-value" id="improveTapPrice">120</span>
    </div>
`;
marketItems.insertBefore(improveTapElement, marketItems.firstChild);

let currentImproveTapLevel = parseInt(localStorage.getItem('improveTapLevel')) || 0;
function updateImproveTapButton() {
    const improveTapButton = document.getElementById('improveTapButton');
    const improveTapPrice = document.getElementById('improveTapPrice');
    const improveTapLevel = document.getElementById('improveTapLevel');
    const improveTapProfit = document.getElementById('improveTapProfit');

    if (currentImproveTapLevel >= improveTapData.length || localStorage.getItem('improveTapMaxLevel') === 'true') {
        improveTapLevel.textContent = improveTapData[improveTapData.length - 1].level;
        improveTapProfit.textContent = improveTapData[improveTapData.length - 1].profit;
        improveTapPrice.textContent = 'MAX';
        improveTapButton.disabled = true;
        improveTapButton.textContent = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å';
        localStorage.setItem('improveTapMaxLevel', 'true');
    } else {
        const nextLevel = improveTapData[currentImproveTapLevel];
        improveTapLevel.textContent = nextLevel.level;
        improveTapProfit.textContent = nextLevel.profit;
        improveTapPrice.textContent = nextLevel.price;
        improveTapButton.disabled = false;
    }
    
    localStorage.setItem('improveTapLevel', currentImproveTapLevel.toString());
}

// –û–±–Ω–æ–≤–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è —Ç–∞–ø–æ–≤
document.getElementById('improveTapButton').addEventListener('click', function() {
    if (this.disabled) return;
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
    }

    const nextLevel = improveTapData[currentImproveTapLevel];
    const currentBalance = parseInt(localStorage.getItem('balance')) || 0;
    const currentTapProfit = parseInt(localStorage.getItem('tapProfit')) || 1;

    if (currentBalance >= nextLevel.price) {
        const newBalance = currentBalance - nextLevel.price;
        localStorage.setItem('balance', newBalance.toString());

        const newTapProfit = currentTapProfit + nextLevel.profit; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏
        localStorage.setItem('tapProfit', newTapProfit.toString());
        
        if (typeof updateTapProfit === 'function') {
            tapProfit = newTapProfit; // –û–±–Ω–æ–≤–ª—è–µ–º tapProfit
            updateTapProfit();
        }

        currentImproveTapLevel++;
        if (currentImproveTapLevel >= improveTapData.length) {
            currentImproveTapLevel = improveTapData.length - 1;
            localStorage.setItem('improveTapMaxLevel', 'true');
        }
        updateImproveTapButton();

        updateBalance();

        showPopup('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!', `–í—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –ø—Ä–∏–±—ã–ª—å –∑–∞ —Ç–∞–ø –Ω–∞ +${nextLevel.profit}!`);
    } else {
        showPopup('–û–π!', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!');
    }
});

if (localStorage.getItem('improveTapMaxLevel') === 'true') {
    currentImproveTapLevel = improveTapData.length - 1;
}
updateImproveTapButton();

const improveTapElement1 = document.createElement('div');
improveTapElement1.className = 'market-item';
improveTapElement1.innerHTML = `
    <div class="market-item-header">
        <span class="market-item-level">–£—Ä. <span id="improveTapLevel1">1</span></span>
        <span class="market-item-title">–í–æ–π—Ç–∏ –≤ –∫–æ–Ω–¥–∏—Ü–∏–∏</span>
        <span class="market-item-profit">
            –ü—Ä–∏–±—ã–ª—å –∑–∞ —Ç–∞–ø <img src="assets/litcoin.png" alt="LIT" class="lit-coin-small">+<span id="improveTapProfit1">1</span>
        </span>
    </div>
    <hr class="item-divider">
    <div class="market-item-buy" id="improveTapButton1">
        <img src="assets/litcoin.png" alt="LIT" class="lit-coin">
        <span class="price-value" id="improveTapPrice1">200</span>
    </div>
`;
marketItems.appendChild(improveTapElement1);

let currentImproveTapLevel1 = parseInt(localStorage.getItem('improveTapLevel1')) || 0;
function updateImproveTapButton1() {
    const improveTapButton1 = document.getElementById('improveTapButton1');
    const improveTapPrice1 = document.getElementById('improveTapPrice1');
    const improveTapLevel1 = document.getElementById('improveTapLevel1');
    const improveTapProfit1 = document.getElementById('improveTapProfit1');

    if (currentImproveTapLevel1 >= improveTapData1.length || localStorage.getItem('improveTapMaxLevel1') === 'true') {
        improveTapLevel1.textContent = improveTapData1[improveTapData1.length - 1].level;
        improveTapProfit1.textContent = improveTapData1[improveTapData1.length - 1].profit;
        improveTapPrice1.textContent = 'MAX';
        improveTapButton1.disabled = true;
        improveTapButton1.textContent = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å';
        localStorage.setItem('improveTapMaxLevel1', 'true');
    } else {
        const nextLevel = improveTapData1[currentImproveTapLevel1];
        improveTapLevel1.textContent = nextLevel.level;
        improveTapProfit1.textContent = nextLevel.profit;
        improveTapPrice1.textContent = nextLevel.price;
        improveTapButton1.disabled = false;
    }
    
    localStorage.setItem('improveTapLevel1', currentImproveTapLevel1.toString());
}

// –ü–æ—Ç–æ—Ä–∏—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è —Ç–∞–ø–æ–≤
document.getElementById('improveTapButton1').addEventListener('click', function() {
    if (this.disabled) return;

    const nextLevel = improveTapData1[currentImproveTapLevel1];
    const currentBalance = parseInt(localStorage.getItem('balance')) || 0;
    const currentTapProfit = parseInt(localStorage.getItem('tapProfit')) || 1;

    if (currentBalance >= nextLevel.price) {
        const newBalance = currentBalance - nextLevel.price;
        localStorage.setItem('balance', newBalance.toString());

        const newTapProfit = currentTapProfit + nextLevel.profit; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏
        localStorage.setItem('tapProfit', newTapProfit.toString());
        
        if (typeof updateTapProfit === 'function') {
            tapProfit = newTapProfit; // –û–±–Ω–æ–≤–ª—è–µ–º tapProfit
            updateTapProfit();
        }

        currentImproveTapLevel1++;
        if (currentImproveTapLevel1 >= improveTapData1.length) {
            currentImproveTapLevel1 = improveTapData1.length - 1;
            localStorage.setItem('improveTapMaxLevel1', 'true');
        }
        updateImproveTapButton1();

        updateBalance();

        showPopup('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!', `–í—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –ø—Ä–∏–±—ã–ª—å –∑–∞ —Ç–∞–ø –Ω–∞ +${nextLevel.profit}!`);
    } else {
        showPopup('–û–π!', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!');
    }
});

if (localStorage.getItem('improveTapMaxLevel1') === 'true') {
    currentImproveTapLevel1 = improveTapData1.length - 1;
}
updateImproveTapButton1();

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–∞–ø 2
const improveTapElement2 = document.createElement('div');
improveTapElement2.className = 'market-item';
improveTapElement2.innerHTML = `
    <div class="market-item-header">
        <span class="market-item-level">–£—Ä. <span id="improveTapLevel2">1</span></span>
        <span class="market-item-title">–ê–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Ç–∞–ø</span>
        <span class="market-item-profit">
            –ü—Ä–∏–±—ã–ª—å –∑–∞ —Ç–∞–ø <img src="assets/litcoin.png" alt="LIT" class="lit-coin-small">+<span id="improveTapProfit2">1</span>
        </span>
    </div>
    <hr class="item-divider">
    <div class="market-item-buy" id="improveTapButton2">
        <img src="assets/litcoin.png" alt="LIT" class="lit-coin">
        <span class="price-value" id="improveTapPrice2">9000</span>
    </div>
`;
marketItems.appendChild(improveTapElement2);

let currentImproveTapLevel2 = parseInt(localStorage.getItem('improveTapLevel2')) || 0;
function updateImproveTapButton2() {
    const improveTapButton2 = document.getElementById('improveTapButton2');
    const improveTapPrice2 = document.getElementById('improveTapPrice2');
    const improveTapLevel2 = document.getElementById('improveTapLevel2');
    const improveTapProfit2 = document.getElementById('improveTapProfit2');

    if (currentImproveTapLevel2 >= improveTapData2.length || localStorage.getItem('improveTapMaxLevel2') === 'true') {
        improveTapLevel2.textContent = improveTapData2[improveTapData2.length - 1].level;
        improveTapProfit2.textContent = improveTapData2[improveTapData2.length - 1].profit;
        improveTapPrice2.textContent = 'MAX';
        improveTapButton2.disabled = true;
        improveTapButton2.textContent = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å';
        localStorage.setItem('improveTapMaxLevel2', 'true');
    } else {
        const nextLevel = improveTapData2[currentImproveTapLevel2];
        improveTapLevel2.textContent = nextLevel.level;
        improveTapProfit2.textContent = nextLevel.profit;
        improveTapPrice2.textContent = nextLevel.price;
        improveTapButton2.disabled = false;
    }
    
    localStorage.setItem('improveTapLevel2', currentImproveTapLevel2.toString());
}

// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è improveTapButton2
document.getElementById('improveTapButton2').addEventListener('click', function() {
    if (this.disabled) return;

    const nextLevel = improveTapData2[currentImproveTapLevel2];
    const currentBalance = parseInt(localStorage.getItem('balance')) || 0;
    const currentTapProfit = parseInt(localStorage.getItem('tapProfit')) || 1;

    if (currentBalance >= nextLevel.price) {
        const newBalance = currentBalance - nextLevel.price;
        localStorage.setItem('balance', newBalance.toString());

        const newTapProfit = currentTapProfit + nextLevel.profit; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏
        localStorage.setItem('tapProfit', newTapProfit.toString());
        
        if (typeof updateTapProfit === 'function') {
            tapProfit = newTapProfit; // –û–±–Ω–æ–≤–ª—è–µ–º tapProfit
            updateTapProfit();
        }

        currentImproveTapLevel2++;
        if (currentImproveTapLevel2 >= improveTapData2.length) {
            currentImproveTapLevel2 = improveTapData2.length - 1;
            localStorage.setItem('improveTapMaxLevel2', 'true');
        }
        updateImproveTapButton2();

        updateBalance();

        showPopup('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!', `–í—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –ø—Ä–∏–±—ã–ª—å –∑–∞ —Ç–∞–ø –Ω–∞ +${nextLevel.profit}!`);
    } else {
        showPopup('–û–π!', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!');
    }
});

if (localStorage.getItem('improveTapMaxLevel2') === 'true') {
    currentImproveTapLevel2 = improveTapData2.length - 1;
}
updateImproveTapButton2();

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–∞–ø 3
const improveTapElement3 = document.createElement('div');
improveTapElement3.className = 'market-item';
improveTapElement3.innerHTML = `
    <div class="market-item-header">
        <span class="market-item-level">–£—Ä. <span id="improveTapLevel3">1</span></span>
        <span class="market-item-title">–†–æ–¥–Ω—ã–π —Ç–∞–ø</span>
        <span class="market-item-profit">
            –ü—Ä–∏–±—ã–ª—å –∑–∞ —Ç–∞–ø <img src="assets/litcoin.png" alt="LIT" class="lit-coin-small">+<span id="improveTapProfit3">1</span>
        </span>
    </div>
    <hr class="item-divider">
    <div class="market-item-buy" id="improveTapButton3">
        <img src="assets/litcoin.png" alt="LIT" class="lit-coin">
        <span class="price-value" id="improveTapPrice3">120</span>
    </div>
`;
marketItems.appendChild(improveTapElement3);

let currentImproveTapLevel3 = parseInt(localStorage.getItem('improveTapLevel3')) || 0;
function updateImproveTapButton3() {
    const improveTapButton3 = document.getElementById('improveTapButton3');
    const improveTapPrice3 = document.getElementById('improveTapPrice3');
    const improveTapLevel3 = document.getElementById('improveTapLevel3');
    const improveTapProfit3 = document.getElementById('improveTapProfit3');

    if (currentImproveTapLevel3 >= improveTapData3.length || localStorage.getItem('improveTapMaxLevel3') === 'true') {
        improveTapLevel3.textContent = improveTapData3[improveTapData3.length - 1].level;
        improveTapProfit3.textContent = improveTapData3[improveTapData3.length - 1].profit;
        improveTapPrice3.textContent = 'MAX';
        improveTapButton3.disabled = true;
        improveTapButton3.textContent = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å';
        localStorage.setItem('improveTapMaxLevel3', 'true');
    } else {
        const nextLevel = improveTapData3[currentImproveTapLevel3];
        improveTapLevel3.textContent = nextLevel.level;
        improveTapProfit3.textContent = nextLevel.profit;
        improveTapPrice3.textContent = nextLevel.price;
        improveTapButton3.disabled = false;
    }
    
    localStorage.setItem('improveTapLevel3', currentImproveTapLevel3.toString());
}

// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è improveTapButton3
document.getElementById('improveTapButton3').addEventListener('click', function() {
    if (this.disabled) return;

    const nextLevel = improveTapData3[currentImproveTapLevel3];
    const currentBalance = parseInt(localStorage.getItem('balance')) || 0;
    const currentTapProfit = parseInt(localStorage.getItem('tapProfit')) || 1;

    if (currentBalance >= nextLevel.price) {
        const newBalance = currentBalance - nextLevel.price;
        localStorage.setItem('balance', newBalance.toString());

        const newTapProfit = currentTapProfit + nextLevel.profit; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏
        localStorage.setItem('tapProfit', newTapProfit.toString());
        
        if (typeof updateTapProfit === 'function') {
            tapProfit = newTapProfit; // –û–±–Ω–æ–≤–ª—è–µ–º tapProfit
            updateTapProfit();
        }

        currentImproveTapLevel3++;
        if (currentImproveTapLevel3 >= improveTapData3.length) {
            currentImproveTapLevel3 = improveTapData3.length - 1;
            localStorage.setItem('improveTapMaxLevel3', 'true');
        }
        updateImproveTapButton3();

        updateBalance();

        showPopup('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!', `–í—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –ø—Ä–∏–±—ã–ª—å –∑–∞ —Ç–∞–ø –Ω–∞ +${nextLevel.profit}!`);
    } else {
        showPopup('–û–π!', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!');
    }
});

if (localStorage.getItem('improveTapMaxLevel3') === 'true') {
    currentImproveTapLevel3 = improveTapData3.length - 1;
}
updateImproveTapButton3();

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é initializeMarketItems(), —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
function initializeMarketItems() {
    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

    updateDrinkLitButton();
    updateImproveTapButton();
    updateImproveTapButton1();
    updateImproveTapButton2();
    updateImproveTapButton3();
}

// –í—ã–∑–æ–≤–∏—Ç–µ initializeMarketItems() –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initializeMarketItems);
    
    const drinkLitElement = document.createElement('div');
    drinkLitElement.className = 'market-item';
    drinkLitElement.innerHTML = `
        <div class="market-item-header">
            <span class="market-item-level">–£—Ä. <span id="drinkLitLevel">1</span></span>
            <span class="market-item-title">–ë–∞—Ö–Ω—É—Ç—å LITWIN</span>
            <span class="market-item-profit">
                –ü—Ä–∏–±—ã–ª—å –∑–∞ —Ç–∞–ø <img src="assets/litcoin.png" alt="LIT" class="lit-coin-small">+<span id="drinkLitProfit">1</span>
            </span>
        </div>
        <hr class="item-divider">
        <div class="market-item-buy" id="drinkLitButton">
            <img src="assets/litcoin.png" alt="LIT" class="lit-coin">
            <span class="price-value" id="drinkLitPrice">100</span>
        </div>
    `;
    marketItems.insertBefore(drinkLitElement, marketItems.firstChild);

    let currentDrinkLitLevel = parseInt(localStorage.getItem('drinkLitLevel')) || 0;
    function updateDrinkLitButton() {
        const drinkLitButton = document.getElementById('drinkLitButton');
        const drinkLitPrice = document.getElementById('drinkLitPrice');
        const drinkLitLevel = document.getElementById('drinkLitLevel');
        const drinkLitProfit = document.getElementById('drinkLitProfit');

        if (currentDrinkLitLevel >= drinkLitData.length || localStorage.getItem('drinkLitMaxLevel') === 'true') {
            drinkLitLevel.textContent = drinkLitData[drinkLitData.length - 1].level;
            drinkLitProfit.textContent = drinkLitData[drinkLitData.length - 1].profit;
            drinkLitPrice.textContent = 'MAX';
            drinkLitButton.disabled = true;
            drinkLitButton.textContent = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å';
            localStorage.setItem('drinkLitMaxLevel', 'true');
        } else {
            const nextLevel = drinkLitData[currentDrinkLitLevel];
            drinkLitLevel.textContent = nextLevel.level;
            drinkLitProfit.textContent = nextLevel.profit;
            drinkLitPrice.textContent = nextLevel.price;
            drinkLitButton.disabled = false;
        }
        
        localStorage.setItem('drinkLitLevel', currentDrinkLitLevel.toString());
    }

    document.getElementById('drinkLitButton').addEventListener('click', function() {
        if (this.disabled) return;

        const nextLevel = drinkLitData[currentDrinkLitLevel];
        const currentBalance = parseInt(localStorage.getItem('balance')) || 0;
        const currentTapProfit = parseInt(localStorage.getItem('tapProfit')) || 1;

        if (currentBalance >= nextLevel.price) {
            const newBalance = currentBalance - nextLevel.price;
            localStorage.setItem('balance', newBalance.toString());

            const newTapProfit = currentTapProfit + nextLevel.profit;
            localStorage.setItem('tapProfit', newTapProfit.toString());
            
            if (typeof updateTapProfit === 'function') {
                tapProfit = newTapProfit;
                updateTapProfit();
            }

            currentDrinkLitLevel++;
            if (currentDrinkLitLevel >= drinkLitData.length) {
                currentDrinkLitLevel = drinkLitData.length - 1;
                localStorage.setItem('drinkLitMaxLevel', 'true');
            }
            updateDrinkLitButton();

            updateBalance();

            showPopup('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!', `–í—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –ø—Ä–∏–±—ã–ª—å –∑–∞ —Ç–∞–ø –Ω–∞ +${nextLevel.profit}!`);
        } else {
            showPopup('–û–π!', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!');
        }
    });

    if (localStorage.getItem('drinkLitMaxLevel') === 'true') {
        currentDrinkLitLevel = drinkLitData.length - 1;
    } 
    updateDrinkLitButton();
    








    const farmData = [
        { level: 1, profit: 100, price: 100 },
        { level: 2, profit: 200, price: 200 },
        { level: 3, profit: 300, price: 400 },
        { level: 4, profit: 400, price: 800 },
        { level: 5, profit: 500, price: 1600 },
        { level: 6, profit: 600, price: 3200 },
        { level: 7, profit: 700, price: 6400 },
        { level: 8, profit: 800, price: 12800 },
        { level: 9, profit: 900, price: 25600 },
        { level: 10, profit: 1000, price: 51200 },
    ];
    
    const farmElement = document.createElement('div');
    farmElement.className = 'market-item';
    farmElement.innerHTML = `
        <div class="market-item-header">
            <span class="market-item-level">–£—Ä. <span id="farmLevel">1</span></span>
            <span class="market-item-title">–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–≤–æ–¥ LITWIN</span>
            <span class="market-item-profit">
                –ü—Ä–∏–±—ã–ª—å –≤ —á–∞—Å <img src="assets/litcoin.png" alt="LIT" class="lit-coin-small">+<span id="farmProfit">100</span>
            </span>
        </div>
        <hr class="item-divider">
        <div class="market-item-buy" id="farmButton">
            <img src="assets/litcoin.png" alt="LIT" class="lit-coin">
            <span class="price-value" id="farmPrice">100</span>
        </div>
    `;
    marketItems.appendChild(farmElement);
    
    let currentFarmLevel = parseInt(localStorage.getItem('farmLevel')) || 0;
    
    function updateFarmButton() {
        const farmButton = document.getElementById('farmButton');
        const farmPrice = document.getElementById('farmPrice');
        const farmLevel = document.getElementById('farmLevel');
        const farmProfit = document.getElementById('farmProfit');

        if (currentFarmLevel >= farmData.length || localStorage.getItem('farmMaxLevel') === 'true') {
            farmLevel.textContent = farmData[farmData.length - 1].level;
            farmProfit.textContent = farmData[farmData.length - 1].profit;
            farmPrice.textContent = 'MAX';
            farmButton.disabled = true;
            farmButton.textContent = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å';
            localStorage.setItem('farmMaxLevel', 'true');
        } else {
            const nextLevel = farmData[currentFarmLevel];
            farmLevel.textContent = nextLevel.level;
            farmProfit.textContent = nextLevel.profit;
            farmPrice.textContent = nextLevel.price;
            farmButton.disabled = false;
        }
        
        localStorage.setItem('farmLevel', currentFarmLevel.toString());
    }
    
    document.getElementById('farmButton').addEventListener('click', function() {
        if (this.disabled) return;

        const nextLevel = farmData[currentFarmLevel];
        const currentBalance = parseInt(localStorage.getItem('balance')) || 0;
        const currentHourlyProfit = parseInt(localStorage.getItem('hourlyProfit')) || 0;

        if (currentBalance >= nextLevel.price) {
            const newBalance = currentBalance - nextLevel.price;
            localStorage.setItem('balance', newBalance.toString());

            const newHourlyProfit = currentHourlyProfit + nextLevel.profit;
            localStorage.setItem('hourlyProfit', newHourlyProfit.toString());
            
            if (typeof updateHourlyProfit === 'function') {
                hourlyProfit = newHourlyProfit;
                updateHourlyProfit();
            }

            currentFarmLevel++;
            if (currentFarmLevel >= farmData.length) {
                currentFarmLevel = farmData.length - 1;
                localStorage.setItem('farmMaxLevel', 'true');
            }
            updateFarmButton();

            updateBalance();

            showPopup('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!', `–í—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –ø—Ä–∏–±—ã–ª—å –≤ —á–∞—Å –Ω–∞ +${nextLevel.profit}!`);
        } else {
            showPopup('–û–π!', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!');
        }
    });

    if (localStorage.getItem('farmMaxLevel') === 'true') {
        currentFarmLevel = farmData.length - 1;
    }
    updateFarmButton();


    const hourData1 = [
        { level: 1, profit: 100, price: 150 },
        { level: 2, profit: 200, price: 250 },
        { level: 3, profit: 300, price: 450 },
        { level: 4, profit: 400, price: 850 },
        { level: 5, profit: 500, price: 1650 },
        { level: 6, profit: 600, price: 3250 },
        { level: 7, profit: 700, price: 6700 },
        { level: 8, profit: 800, price: 13800 },
        { level: 9, profit: 900, price: 27600 },
        { level: 10, profit: 1000, price: 54200 },
    ];
    
    const hourData2 = [
        { level: 1, profit: 1000, price: 57000 },
        { level: 2, profit: 2000, price: 125000 },
        { level: 3, profit: 3000, price: 250000 },
        { level: 4, profit: 4000, price: 534000 },
        { level: 5, profit: 5000, price: 1100000 },
        { level: 6, profit: 6000, price: 2200000 },
        { level: 7, profit: 7000, price: 3600000 },
        { level: 8, profit: 8000, price: 7000000 },
        { level: 9, profit: 9000, price: 9000000 },
        { level: 10, profit: 10000, price: 18000000 },
    ];
    
    const hourData3 = [
        { level: 1, profit: 300, price: 550 },
        { level: 2, profit: 600, price: 3500 },
        { level: 3, profit: 800, price: 14000 },
        { level: 4, profit: 900, price: 30000 },
        { level: 5, profit: 1000, price: 60000 },
        { level: 6, profit: 1200, price: 75000 },
        { level: 7, profit: 1700, price: 100000 },
        { level: 8, profit: 2300, price: 140000 },
        { level: 9, profit: 2800, price: 206000 },
        { level: 10, profit: 3500, price: 275000 },
    ];
    
    const hourData4 = [
        { level: 1, profit: 50, price: 50 },
        { level: 2, profit: 70, price: 70 },
        { level: 3, profit: 80, price: 80 },
        { level: 4, profit: 90, price: 90 },
        { level: 5, profit: 100, price: 100 },
        { level: 6, profit: 110, price: 110 },
        { level: 7, profit: 140, price: 140 },
        { level: 8, profit: 160, price: 160 },
        { level: 9, profit: 210, price: 210 },
        { level: 10, profit: 250, price: 250 },
    ];
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤ —á–∞—Å
    function createHourButton(data, title, index) {
        const hourElement = document.createElement('div');
        hourElement.className = 'market-item';
        hourElement.innerHTML = `
            <div class="market-item-header">
                <span class="market-item-level">–£—Ä. <span id="hourLevel${index}">1</span></span>
                <span class="market-item-title">${title}</span>
                <span class="market-item-profit">
                    –ü—Ä–∏–±—ã–ª—å –≤ —á–∞—Å <img src="assets/litcoin.png" alt="LIT" class="lit-coin-small">+<span id="hourProfit${index}">100</span>
                </span>
            </div>
            <hr class="item-divider">
            <div class="market-item-buy" id="hourButton${index}">
                <img src="assets/litcoin.png" alt="LIT" class="lit-coin">
                <span class="price-value" id="hourPrice${index}">150</span>
            </div>
        `;
        marketItems.appendChild(hourElement);
    
        let currentHourLevel = parseInt(localStorage.getItem(`hourLevel${index}`)) || 0;
    
        function updateHourButton() {
            const hourButton = document.getElementById(`hourButton${index}`);
            const hourPrice = document.getElementById(`hourPrice${index}`);
            const hourLevel = document.getElementById(`hourLevel${index}`);
            const hourProfit = document.getElementById(`hourProfit${index}`);
    
            if (currentHourLevel >= data.length || localStorage.getItem(`hourMaxLevel${index}`) === 'true') {
                hourLevel.textContent = data[data.length - 1].level;
                hourProfit.textContent = data[data.length - 1].profit;
                hourPrice.textContent = 'MAX';
                hourButton.disabled = true;
                hourButton.textContent = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å';
                localStorage.setItem(`hourMaxLevel${index}`, 'true');
            } else {
                const nextLevel = data[currentHourLevel];
                hourLevel.textContent = nextLevel.level;
                hourProfit.textContent = nextLevel.profit;
                hourPrice.textContent = nextLevel.price;
                hourButton.disabled = false;
            }
    
            localStorage.setItem(`hourLevel${index}`, currentHourLevel.toString());
        }
    
        document.getElementById(`hourButton${index}`).addEventListener('click', function() {
            if (this.disabled) return;
    
            const nextLevel = data[currentHourLevel];
            const currentBalance = parseInt(localStorage.getItem('balance')) || 0;
            const currentHourlyProfit = parseInt(localStorage.getItem('hourlyProfit')) || 0;
    
            if (currentBalance >= nextLevel.price) {
                const newBalance = currentBalance - nextLevel.price;
                localStorage.setItem('balance', newBalance.toString());
    
                const newHourlyProfit = currentHourlyProfit + nextLevel.profit;
                localStorage.setItem('hourlyProfit', newHourlyProfit.toString());
    
                if (typeof updateHourlyProfit === 'function') {
                    hourlyProfit = newHourlyProfit;
                    updateHourlyProfit();
                }
    
                currentHourLevel++;
                if (currentHourLevel >= data.length) {
                    currentHourLevel = data.length - 1;
                    localStorage.setItem(`hourMaxLevel${index}`, 'true');
                }
                updateHourButton();
    
                updateBalance();
    
                showPopup('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!', `–í—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –ø—Ä–∏–±—ã–ª—å –≤ —á–∞—Å –Ω–∞ +${nextLevel.profit}!`);
            } else {
                showPopup('–û–π!', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!');
            }
        });
    
        if (localStorage.getItem(`hourMaxLevel${index}`) === 'true') {
            currentHourLevel = data.length - 1;
        }
        updateHourButton();
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —á–µ—Ç—ã—Ä–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    createHourButton(hourData1, '–ó–∞–µ—Ö–∞—Ç—å –≤ –∫–æ—Ñ–µ–º–∞–Ω–∏—é', 1);
    createHourButton(hourData2, '–ü–æ–¥–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ–π—Ü–∞', 2);
    createHourButton(hourData3, '–í—ã–∏–≥—Ä–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª –º–µ–¥–∏–∞–ª–∏–≥–µ', 3);
    createHourButton(hourData4, '–í—ã–∏–≥—Ä–∞—Ç—å –≥–æ–Ω–∫—É', 4);














    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

const energyData = [
    { level: 1, profit: 100, price: 100 },
    { level: 2, profit: 200, price: 200 },
    { level: 3, profit: 300, price: 400 },
    { level: 4, profit: 400, price: 800 },
    { level: 5, profit: 500, price: 1600 },
    { level: 6, profit: 600, price: 3200 },
    { level: 7, profit: 700, price: 6400 },
    { level: 8, profit: 800, price: 12800 },
    { level: 9, profit: 900, price: 25600 },
    { level: 10, profit: 1000, price: 51200 },
];

const energyElement = document.createElement('div');
energyElement.className = 'market-item';
energyElement.innerHTML = `
    <div class="market-item-header">
        <span class="market-item-level">–£—Ä. <span id="energyLevel">1</span></span>
        <span class="market-item-title">–ó–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏</span>
        <span class="market-item-profit">
            –î–æ–±–∞–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–∏–∏ <img src="assets/litcoin.png" alt="LIT" class="lit-coin-small">+<span id="energyProfit">100</span>
        </span>
    </div>
    <hr class="item-divider">
    <div class="market-item-buy" id="energyButton">
        <img src="assets/litcoin.png" alt="LIT" class="lit-coin">
        <span class="price-value" id="energyPrice">100</span>
    </div>
`;
marketItems.appendChild(energyElement);

let currentEnergyLevel = parseInt(localStorage.getItem('energyLevel')) || 0;

function updateEnergyButton() {
    const energyButton = document.getElementById('energyButton');
    const energyPrice = document.getElementById('energyPrice');
    const energyLevel = document.getElementById('energyLevel');
    const energyProfit = document.getElementById('energyProfit');

    if (currentEnergyLevel >= energyData.length || localStorage.getItem('energyMaxLevel') === 'true') {
        energyLevel.textContent = energyData[energyData.length - 1].level;
        energyProfit.textContent = energyData[energyData.length - 1].profit;
        energyPrice.textContent = 'MAX';
        energyButton.disabled = true;
        energyButton.textContent = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å';
        localStorage.setItem('energyMaxLevel', 'true');
    } else {
        const nextLevel = energyData[currentEnergyLevel];
        energyLevel.textContent = nextLevel.level;
        energyProfit.textContent = nextLevel.profit;
        energyPrice.textContent = nextLevel.price;
        energyButton.disabled = false;
    }
    
    localStorage.setItem('energyLevel', currentEnergyLevel.toString());
}

document.getElementById('energyButton').addEventListener('click', function() {
    if (this.disabled) return;

    const nextLevel = energyData[currentEnergyLevel];
    const currentBalance = parseInt(localStorage.getItem('balance')) || 0;

    if (currentBalance >= nextLevel.price) {
        const newBalance = currentBalance - nextLevel.price;
        localStorage.setItem('balance', newBalance.toString());

        const currentMaxEnergy = parseInt(localStorage.getItem('maxEnergy')) || 100;
        const newMaxEnergy = currentMaxEnergy + nextLevel.profit;
        localStorage.setItem('maxEnergy', newMaxEnergy.toString());

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
        window.parent.postMessage({ type: 'updateMaxEnergy', newMaxEnergy: newMaxEnergy }, '*');

        currentEnergyLevel++;
        if (currentEnergyLevel >= energyData.length) {
            currentEnergyLevel = energyData.length - 1;
            localStorage.setItem('energyMaxLevel', 'true');
        }
        updateEnergyButton();

        updateBalance();

        showPopup('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!', `–í—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é –Ω–∞ +${nextLevel.profit}!`);
    } else {
        showPopup('–û–π!', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!');
    }
});

if (localStorage.getItem('energyMaxLevel') === 'true') {
    currentEnergyLevel = energyData.length - 1;
}
updateEnergyButton();

// ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...







    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    const marketData = [
        
        
        { id: 3, title: 'Title', level: 1, profitType: 'hourly', profit: 4, price: 11, timer: '16:30:00' },
       
    ];
    
 

    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    marketItems.addEventListener('click', function(event) {
        const buyButton = event.target.closest('.market-item-buy');
        if (buyButton) {
            const itemId = parseInt(buyButton.dataset.id);
            const item = marketData.find(item => item.id === itemId);
            if (item) {
                buyItem(item);
            }
        }
    });

    function buyItem(item) {
        const currentBalance = parseInt(localStorage.getItem('balance')) || 0;
        const currentHourlyProfit = parseInt(localStorage.getItem('hourlyProfit')) || 0;
        const currentTapProfit = parseInt(localStorage.getItem('tapProfit')) || 1;

        if (currentBalance >= item.price) {
            // –í—ã—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É –∏–∑ –±–∞–ª–∞–Ω—Å–∞
            const newBalance = currentBalance - item.price;
            localStorage.setItem('balance', newBalance.toString());

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø—Ä–∏–±—ã–ª—å –∏–ª–∏ —ç–Ω–µ—Ä–≥–∏—é
            if (item.profitType === 'hourly') {
                const newHourlyProfit = currentHourlyProfit + item.profit;
                localStorage.setItem('hourlyProfit', newHourlyProfit.toString());
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
                if (typeof updateHourlyProfit === 'function') {
                    hourlyProfit = newHourlyProfit;
                    updateHourlyProfit();
                }
            } else if (item.profitType === 'tap') {
                const newTapProfit = currentTapProfit + item.profit;
                localStorage.setItem('tapProfit', newTapProfit.toString());
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
                if (typeof updateTapProfit === 'function') {
                    tapProfit = newTapProfit;
                    updateTapProfit(); // –û–±–Ω–æ–≤–ª—è–µ–º tapProfit
                }
            } else if (item.profitType === 'energy') {
                // —Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
                window.parent.postMessage({ type: 'updateMaxEnergy', increase: item.profit }, '*');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            updateCollectionDisplay();

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            updateBalance();

            showPopup('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!', `–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ "${item.title}"!`);
        } else {
            showPopup('–û–π!', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!');
        }
    }

    function updateCollectionDisplay() {
        // –ó–¥–µ—Å—å –º–æ–∂–æ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–µ—Ç–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    }

    function updateProfitDisplay() {
        const tapProfitElement = document.getElementById('tapProfit');
        const hourlyProfitElement = document.getElementById('hourlyProfit');
        
        if (tapProfitElement) {
            tapProfitElement.textContent = localStorage.getItem('tapProfit') || '1';
        }
        
        if (hourlyProfitElement) {
            hourlyProfitElement.textContent = localStorage.getItem('hourlyProfit') || '0';
        }
    }

    function updateBalance() {
        const balanceElement = document.getElementById('balance');
        if (balanceElement) {
            balanceElement.textContent = localStorage.getItem('balance') || '0';
        }
    }

    // –í—ã–∑—ã–≤–∞–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    updateProfitDisplay();
    
    function updateUnlockedCans() {
        const currentLevel = parseInt(localStorage.getItem('currentLevel')) || 1;
        const items = collectionGrid.querySelectorAll('.collection-item');
        items.forEach((item, index) => {
            if (index < currentLevel) {
                item.classList.add('unlocked');
            } else {
                item.classList.remove('unlocked');
            }
        });
    }
    
    function updateCanImage(index) {
        const canElement = document.getElementById('can');
        const canTypeElement = document.getElementById('canType');
        if (canElement && canTypeElement) {
            canElement.src = canImages[index];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ –±–∞–Ω–∫–∏
            if (index === 0) {
                canTypeElement.textContent = 'Classic';
            } else if (index === 1) {
                canTypeElement.textContent = 'Mango Coconut';
            } else if (index === 2) {
                canTypeElement.textContent = 'Blueberry';
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–µ–≤—å—é –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            const canPreviewElement = document.querySelector('.can-preview img');
            if (canPreviewElement) {
                canPreviewElement.src = canImages[index];
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            updateAppTheme(canImages[index]);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –±–∞–Ω–∫—É –≤ localStorage
            localStorage.setItem('selectedCan', index.toString());
        }
    }

    function changeCan(index) {
        if (index >= 0 && index < canImages.length) {
            updateCanImage(index);
            showPopup('–î–∞ –≤—ã –≤ –∫–æ–Ω–¥–∏—Ü–∏—è—Ö!', '–ë–∞–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!');
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    collectionGrid.addEventListener('click', function(event) {
        const item = event.target.closest('.collection-item');
        if (item && item.classList.contains('unlocked')) {
            const index = parseInt(item.dataset.index);
            changeCan(index);
        }
    });

    // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∏
    document.addEventListener('DOMContentLoaded', function() {
        const selectedCan = parseInt(localStorage.getItem('selectedCan')) || 0;
        updateCanImage(selectedCan);
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
    window.addEventListener('message', function(event) {
        if (event.data.type === 'levelUp') {
            updateUnlockedCans();
        }
    });

    // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
    function adjustPageHeight() {
        const footerHeight = document.querySelector('.footer').offsetHeight;
        document.getElementById('collection-page').style.height = `calc(100% - ${footerHeight}px)`;
    }

    // –í—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('load', adjustPageHeight);
    window.addEventListener('resize', adjustPageHeight);
// –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const categoryTabs = document.createElement('div');
categoryTabs.className = 'category-tabs';
categoryTabs.innerHTML = `
    <button class="category-tab active" data-category="tap">–¢–ê–ü</button>
    <button class="category-tab" data-category="hour">–ß–ê–°</button>
    <button class="category-tab" data-category="energy">–≠–ù–ï–†–ì–ò–Ø</button>
    <button class="category-tab" data-category="premium">‚≠ê PREMIUM</button>
`;
marketItems.insertBefore(categoryTabs, marketItems.firstChild);

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π
const tapUpgrades = document.createElement('div');
tapUpgrades.className = 'upgrade-category active';
tapUpgrades.id = 'tap-upgrades';

const hourUpgrades = document.createElement('div');
hourUpgrades.className = 'upgrade-category';
hourUpgrades.id = 'hour-upgrades';

const energyUpgrades = document.createElement('div');
energyUpgrades.className = 'upgrade-category';
energyUpgrades.id = 'energy-upgrades';

const premiumUpgrades = document.createElement('div');
premiumUpgrades.className = 'upgrade-category';
premiumUpgrades.id = 'premium-upgrades';

// –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const existingUpgrades = marketItems.querySelectorAll('.market-item');
existingUpgrades.forEach(upgrade => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–º–∏—É–º-—É–ª—É—á—à–µ–Ω–∏–µ–º
    if (!upgrade.classList.contains('premium-item')) {
        const profitText = upgrade.querySelector('.market-item-profit').textContent.toLowerCase();
        if (profitText.includes('—Ç–∞–ø')) {
            tapUpgrades.appendChild(upgrade);
        } else if (profitText.includes('—á–∞—Å')) {
            hourUpgrades.appendChild(upgrade);
        } else if (profitText.includes('—ç–Ω–µ—Ä–≥–∏–∏')) {
            energyUpgrades.appendChild(upgrade);
        }
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏—É–º-—É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
defaultUpgrades
    .filter(upgrade => upgrade.isPremium)
    .forEach(upgrade => {
        premiumUpgrades.appendChild(createPremiumUpgrade(upgrade));
    });

// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–∞—Ä–∫–µ—Ç
marketItems.appendChild(tapUpgrades);
marketItems.appendChild(hourUpgrades);
marketItems.appendChild(energyUpgrades);
marketItems.appendChild(premiumUpgrades);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫
categoryTabs.addEventListener('click', function(event) {
    if (event.target.classList.contains('category-tab')) {
        const category = event.target.dataset.category;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        categoryTabs.querySelectorAll('.category-tab').forEach(tab => tab.classList.remove('active'));
        event.target.classList.add('active');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É —É–ª—É—á—à–µ–Ω–∏–π
        document.querySelectorAll('.upgrade-category').forEach(group => {
            group.classList.remove('active');
            group.style.display = 'none';
        });
        const targetGroup = document.getElementById(`${category}-upgrades`);
        if (targetGroup) {
            targetGroup.classList.add('active');
            targetGroup.style.display = 'block';
        }
    }
});

})();
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–º–∏—É–º-—É–ª—É—á—à–µ–Ω–∏—è
function createPremiumUpgrade(upgrade) {
    const element = document.createElement('div');
    element.className = 'market-item premium-item';
    element.innerHTML = `
        <div class="market-item-header">
            <span class="market-item-emoji">${upgrade.emoji}</span>
            <span class="market-item-title">${upgrade.title}</span>
            <span class="market-item-profit">
                –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ç–∞–ø–∞ x${upgrade.multiplier} –Ω–∞ 24 —á–∞—Å–∞
            </span>
        </div>
        <hr class="item-divider">
        <div class="market-item-buy premium-buy" id="premium${upgrade.id}">
            <span class="premium-stars">${upgrade.stars} ‚≠ê</span>
        </div>
    `;

    element.querySelector('.premium-buy').addEventListener('click', () => {
        purchaseStarBoost(upgrade);
    });

    return element;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –±—É—Å—Ç–∞ –∑–∞ –∑–≤–µ–∑–¥—ã
async function purchaseStarBoost(upgrade) {
    try {
        const result = await window.Telegram.WebApp.showPopup({
            title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏',
            message: `–ö—É–ø–∏—Ç—å ${upgrade.title} –∑–∞ ${upgrade.stars} ‚≠ê?`,
            buttons: [
                {text: '–ö—É–ø–∏—Ç—å', type: 'ok'},
                {text: '–û—Ç–º–µ–Ω–∞', type: 'cancel'}
            ]
        });

        if (result === 'ok') {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Å—Ç–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º Fragment
            localStorage.setItem('pendingBoost', JSON.stringify({
                multiplier: upgrade.multiplier,
                title: upgrade.title,
                timestamp: Date.now()
            }));

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã Fragment
            const invoiceUrl = `https://t.me/fragment?stars=${upgrade.stars}&comment=${encodeURIComponent(upgrade.title)}`;
            window.Telegram.WebApp.openLink(invoiceUrl);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±—É—Å—Ç–∞:', error);
        window.Telegram.WebApp.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É'
        });
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
window.addEventListener('focus', async () => {
    const pendingBoost = localStorage.getItem('pendingBoost');
    if (pendingBoost) {
        const { multiplier, title } = JSON.parse(pendingBoost);
        
        try {
            const telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
            const boostResponse = await fetch(`/activate-boost?telegramId=${telegramId}&multiplier=${multiplier}&duration=${24 * 60 * 60 * 1000}`);
            const boostData = await boostResponse.json();

            if (boostData.success) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
                window.Telegram.WebApp.showPopup({
                    title: '‚ú® –£—Å–ø–µ—Ö!',
                    message: `${title} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–ú–Ω–æ–∂–∏—Ç–µ–ª—å x${multiplier} –¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞.`
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—É—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                updateBoostStatus();
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è
                window.parent.postMessage({ 
                    type: 'updateBoostMultiplier', 
                    multiplier: multiplier 
                }, '*');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±—É—Å—Ç–∞:', error);
            window.Telegram.WebApp.showPopup({
                title: '–û—à–∏–±–∫–∞',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±—É—Å—Ç'
            });
        }

        // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
        localStorage.removeItem('pendingBoost');
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
const premiumStyles = `
    .premium-item {
        background: linear-gradient(45deg, rgba(255,215,0,0.1), transparent);
        border: 1px solid #ffd700;
    }

    .premium-buy {
        background: linear-gradient(45deg, #ffd700, #ffa500);
        cursor: pointer;
        transition: all 0.2s;
    }

    .premium-buy:hover {
        opacity: 0.9;
        transform: translateY(-1px);
    }

    .premium-stars {
        font-size: 1.2em;
        color: white;
        text-shadow: 0 1px 2px rgba(0,0,0,0.2);
    }

    .boost-timer {
        font-size: 0.9em;
        color: #ffd700;
        margin-top: 4px;
    }
`;

const styleSheet = document.createElement('style');
styleSheet.textContent = premiumStyles;
document.head.appendChild(styleSheet);

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É—Å—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function checkBoosts() {
    try {
        const telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
        const response = await fetch(`/verify-premium?telegramId=${telegramId}`);
        const data = await response.json();
        
        if (data.activeBoosts && data.activeBoosts.length > 0) {
            const maxBoost = Math.max(...data.activeBoosts.map(b => b.multiplier));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤ –∏–≥—Ä–µ
            window.parent.postMessage({ 
                type: 'updateBoostMultiplier', 
                multiplier: maxBoost 
            }, '*');

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä—ã –ª–æ–∫–∞–ª—å–Ω–æ
            startLocalBoostTimer(data.activeBoosts);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±—É—Å—Ç–æ–≤:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –±—É—Å—Ç–∞
function startLocalBoostTimer(boosts) {
    const timerContainer = document.querySelector('.premium-item');
    if (!timerContainer) return;

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–∞–π–º–µ—Ä—ã
    const oldTimers = timerContainer.querySelectorAll('.boost-timer');
    oldTimers.forEach(timer => timer.remove());

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    const timerElement = document.createElement('div');
    timerElement.className = 'boost-timer';
    timerContainer.appendChild(timerElement);

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
    function updateTimer() {
        const currentTime = Date.now();
        const activeBoosts = boosts.filter(boost => 
            (boost.startTime + boost.duration) > currentTime
        );

        if (activeBoosts.length === 0) {
            timerElement.remove();
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
            window.parent.postMessage({ 
                type: 'updateBoostMultiplier', 
                multiplier: 1 
            }, '*');
            return;
        }

        const maxBoost = Math.max(...activeBoosts.map(b => b.multiplier));
        const longestBoost = activeBoosts.reduce((a, b) => 
            (a.startTime + a.duration) > (b.startTime + b.duration) ? a : b
        );

        const timeLeft = (longestBoost.startTime + longestBoost.duration) - currentTime;
        const hours = Math.floor(timeLeft / (60 * 60 * 1000));
        const minutes = Math.floor((timeLeft % (60 * 60 * 1000)) / (60 * 1000));
        
        timerElement.textContent = `–ë—É—Å—Ç x${maxBoost} –∞–∫—Ç–∏–≤–µ–Ω –µ—â–µ ${hours}—á ${minutes}–º`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ª–æ–∫–∞–ª—å–Ω–æ
    updateTimer();
    const timerId = setInterval(updateTimer, 60 * 1000);

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    window.addEventListener('unload', () => clearInterval(timerId));
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É—Å—Ç—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', checkBoosts);